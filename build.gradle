plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id "com.modrinth.minotaur" version "2.+"

    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '2.1.21'
    id 'org.jetbrains.kotlin.plugin.allopen' version '2.1.21'
    id 'org.jetbrains.kotlin.plugin.serialization' version '2.1.21'
}

version = project.evo_plus_version
group = project.maven_group

loom {
    if (!project.hasProperty('production')) {
        accessWidenerPath = file("src/main/resources/evoplus.accesswidener")
    }
}

repositories {
    mavenCentral()
    maven { url 'https://gitlab.diamondworld.pro/api/v4/projects/104/packages/maven' }
    maven { url "https://repo.essential.gg/repository/maven-public" }
    maven { url 'https://jitpack.io' }
}

dependencies {
    // Fabric
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API
    include(modImplementation(fabricApi.module("fabric-message-api-v1", project.fabric_version)))
    include(modImplementation(fabricApi.module("fabric-command-api-v2", project.fabric_version)))
    include(modImplementation(fabricApi.module("fabric-networking-api-v1", project.fabric_version)))

    // Kotlin
    modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

    // Lombok
    compileOnly(annotationProcessor('org.projectlombok:lombok:1.18.30'))

    // Other dependencies
    include(implementation("com.github.ben-manes.caffeine:caffeine:${project.caffeine_version}"))
    include(implementation("pro.diamondworld.evoplusprotocol:evoplusprotocol:${project.evo_plus_protocol_version}"))
    include(implementation("com.github.asyncdargen:rest-client:${project.rest_client_version}"))
    include(implementation("com.github.asyncdargen.crowbar:crowbar-core:${project.crowbar_version}"))

    // Discord RPC
    include(implementation("io.github.vyfor:kpresence:${project.kpresence_version}"))
}

runClient {
    jvmArgs '-Devo-plus.dev=true'
    args "--username=${System.getenv('TEST_NAME')}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(project.java_version.toInteger())
tasks.withType(JavaCompile)*.options*.encoding = 'UTF-8'
kotlin.jvmToolchain(project.java_version.toInteger())
allOpen.annotation('ru.dargen.evoplus.util.kotlin.KotlinOpens')
jar.from('LICENSE')

processResources {
    inputs.property 'version', version
    filteringCharset 'UTF-8'

    filesMatching('fabric.mod.json') {
        expand project.properties
        expand 'version': version
    }
}

static def openFile(String name) {
    return new File(name).text
}

modrinth {
    token = System.getenv('MODRINTH_TOKEN')
    projectId = 'evoplus'
    versionNumber = project.version
    versionName = project.version
    changelog = openFile('release/changelog.txt').split('\n').collect { "- $it" }.join('\n')
    versionType = 'alpha'
    uploadFile = remapJar
    gameVersions = [project.minecraft_version]
    loaders = ['fabric']
    dependencies { project.mod_dependencies.split(',').collect { required.version(it) } }
}

import groovy.json.JsonOutput

tasks.register('postToDiscord') {
    doLast {
        def webhookUrl = System.getenv('RELEASE_WEBHOOK')

        def payload = [
                username: 'EvoPlus',
                content : openFile('release/discord.txt')
                        .replace('{version}', project.version)
                        .replace('{changelog}', openFile('release/changelog.txt').split('\n').collect { "- $it" }.join('\n'))
        ]

        def connection = new URL(webhookUrl).openConnection()
        connection.requestMethod = 'POST'
        connection.doOutput = true
        connection.setRequestProperty 'Content-Type', 'application/json'

        connection.outputStream.withWriter('UTF-8') { it << JsonOutput.toJson(payload)}

        println "Discord release message posted ${connection.responseCode}"
    }
}

tasks.register('publishAndNotify') {
    dependsOn tasks.modrinth
    finalizedBy tasks.postToDiscord
}